name: Integration Tests

on:
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: true
        default: 'quick'
        type: choice
        options:
          - quick
          - full
          - error_handling
  push:
    branches: [main]
    paths:
      - 'action.yml'
      - '*.sh'
      - '.github/workflows/integration.yml'
  pull_request:
    branches: [main]
    paths:
      - 'action.yml'
      - '*.sh'
      - '.github/workflows/integration.yml'
  schedule:
    # Run every Monday at 9 AM UTC to catch any external API changes
    - cron: '0 9 * * 1'

jobs:
  setup-matrix:
    name: Setup Test Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set test matrix based on scope
        id: set-matrix
        run: |
          # Determine test scope based on trigger type
          if [ "${{ github.event_name }}" == "schedule" ]; then
            TEST_SCOPE="full"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TEST_SCOPE="${{ inputs.test_scope }}"
          else
            # Push/PR triggers use quick scope
            TEST_SCOPE="quick"
          fi
          
          echo "Using test scope: $TEST_SCOPE"
          
          case "$TEST_SCOPE" in
            "quick")
              # Quick test: Key combinations for development
              matrix=$(cat << 'EOF'
          {
            "include": [
              {
                "name": "Single Product + Current Release + Warn",
                "products": "single",
                "current_release": "true",
                "duplicate_behavior": "warn"
              },
              {
                "name": "Single Product + Current Release + Error",
                "products": "single",
                "current_release": "true", 
                "duplicate_behavior": "error"
              },
              {
                "name": "Multiple Products + No Current Release + Warn",
                "products": "multiple",
                "current_release": "false",
                "duplicate_behavior": "warn"
              }
            ]
          }
          EOF
              )
              ;;
            "full")
              # Full test: All combinations
              matrix=$(cat << 'EOF'
          {
            "include": [
              {
                "name": "Single Product + Current Release + Warn",
                "products": "single",
                "current_release": "true",
                "duplicate_behavior": "warn"
              },
              {
                "name": "Single Product + Current Release + Error",
                "products": "single",
                "current_release": "true",
                "duplicate_behavior": "error"
              },
              {
                "name": "Single Product + No Current Release + Warn",
                "products": "single",
                "current_release": "false",
                "duplicate_behavior": "warn"
              },
              {
                "name": "Single Product + No Current Release + Error",
                "products": "single",
                "current_release": "false",
                "duplicate_behavior": "error"
              },
              {
                "name": "Multiple Products + Current Release + Warn",
                "products": "multiple",
                "current_release": "true",
                "duplicate_behavior": "warn"
              },
              {
                "name": "Multiple Products + Current Release + Error",
                "products": "multiple",
                "current_release": "true",
                "duplicate_behavior": "error"
              },
              {
                "name": "Multiple Products + No Current Release + Warn",
                "products": "multiple",
                "current_release": "false",
                "duplicate_behavior": "warn"
              },
              {
                "name": "Multiple Products + No Current Release + Error",
                "products": "multiple",
                "current_release": "false",
                "duplicate_behavior": "error"
              }
            ]
          }
          EOF
              )
              ;;
            "error_handling")
              # Error handling: Invalid inputs
              matrix=$(cat << 'EOF'
          {
            "include": [
              {
                "name": "Invalid Media UUID",
                "products": "single",
                "current_release": "false",
                "duplicate_behavior": "error",
                "media_uuid": "invalid-uuid-12345",
                "expect_failure": "true"
              }
            ]
          }
          EOF
              )
              ;;
          esac
          
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix for scope: $TEST_SCOPE"
          echo "$matrix" | jq '.'

  integration-test:
    name: ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs: setup-matrix
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
      max-parallel: 1  # Sequential execution to avoid race conditions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean Product State Before Test
        run: |
          echo "🧹 Cleaning product state before test: ${{ matrix.name }}"
          
          PRODUCT_UUID="c995fb9c-70cc-4de2-b34f-6ce9d331705a"
          
          # Get all downloads for this specific test product using the correct API endpoint
          echo "Fetching downloads for test product ${PRODUCT_UUID}..."
          DOWNLOADS_RESPONSE=$(curl --fail-with-body --silent \
            --url "https://api.surecart.com/v1/downloads?product_ids[]=${PRODUCT_UUID}" \
            --header 'Accept: application/json' \
            --header "Authorization: Bearer ${{ secrets.SURECART_API_TOKEN }}")
          
          echo "Downloads response: $DOWNLOADS_RESPONSE"
          
          # Get all download IDs for this product - we want to delete ALL of them for a clean slate
          ALL_DOWNLOAD_IDS=($(echo "$DOWNLOADS_RESPONSE" | jq -r '.data[]?.id // empty'))
          
          echo "Found ${#ALL_DOWNLOAD_IDS[@]} total downloads in test product to delete"
          
          if [ ${#ALL_DOWNLOAD_IDS[@]} -gt 0 ]; then
            # First, clear the current_release_download on the product to avoid deletion conflicts
            echo "Clearing current release download from product..."
            curl --fail-with-body --silent --show-error \
              --request PATCH \
              --url "https://api.surecart.com/v1/products/${PRODUCT_UUID}" \
              --header 'Accept: application/json' \
              --header "Authorization: Bearer ${{ secrets.SURECART_API_TOKEN }}" \
              --header 'Content-Type: application/json' \
              --data "{\"product\":{\"id\":\"${PRODUCT_UUID}\",\"current_release_download\":null}}" \
              || echo "Failed to clear current release download"
            
            # Wait a moment for the API to process
            sleep 2
            
            # Delete ALL downloads in the test product
            for download_id in "${ALL_DOWNLOAD_IDS[@]}"; do
              if [ -n "$download_id" ]; then
                echo "Deleting download: $download_id"
                DELETE_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
                  --request DELETE \
                  --url "https://api.surecart.com/v1/downloads/${download_id}" \
                  --header 'Accept: application/json' \
                  --header "Authorization: Bearer ${{ secrets.SURECART_API_TOKEN }}")
                
                HTTP_STATUS=$(echo "$DELETE_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
                
                if [ "$HTTP_STATUS" -eq 200 ]; then
                  echo "✅ Successfully deleted download: $download_id"
                else
                  echo "❌ Failed to delete download $download_id (HTTP $HTTP_STATUS)"
                fi
              fi
            done
          else
            echo "No downloads found in test product - already clean"
          fi
          
          echo "✅ Product cleanup completed"

      - name: Run Matrix Test
        uses: ./
        id: matrix-test
        continue-on-error: ${{ matrix.expect_failure == 'true' }}
        with:
          media_uuid: ${{ matrix.media_uuid || '8cc4a4e0-102b-4266-a81e-4aef9ff5713c' }}
          product_uuids: ${{ matrix.products == 'multiple' && 'c995fb9c-70cc-4de2-b34f-6ce9d331705a, c995fb9c-70cc-4de2-b34f-6ce9d331705a' || 'c995fb9c-70cc-4de2-b34f-6ce9d331705a' }}
          set_as_current_release: ${{ matrix.current_release }}
          duplicate_media_behavior: ${{ matrix.duplicate_behavior }}
          surecart_api_token: ${{ secrets.SURECART_API_TOKEN }}

      - name: Verify Expected Outcome
        if: matrix.expect_failure == 'true'
        run: |
          if [ "${{ steps.matrix-test.outcome }}" != "failure" ]; then
            echo "::error::Expected test '${{ matrix.name }}' to fail, but it succeeded"
            exit 1
          else
            echo "✅ Test '${{ matrix.name }}' failed as expected"
          fi

  post-test-cleanup:
    name: Post-Test Information
    runs-on: ubuntu-latest
    needs: integration-test
    if: always()
    steps:
      - name: Integration Test Results
        run: |
          echo "## Integration Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Scope:** ${{ inputs.test_scope || (github.event_name == 'schedule' && 'full (auto)' || 'quick (auto)') }}" >> $GITHUB_STEP_SUMMARY
          echo "**Overall Status:** ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.integration-test.result }}" == "success" ]; then
            echo "✅ All integration tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some integration tests failed. Check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Matrix Tests Executed:**" >> $GITHUB_STEP_SUMMARY
          echo "- Tests run in sequential order to avoid race conditions" >> $GITHUB_STEP_SUMMARY
          echo "- Each test includes full product cleanup before execution" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** These tests use real API calls to SureCart." >> $GITHUB_STEP_SUMMARY
